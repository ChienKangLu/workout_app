// Mocks generated by Mockito 5.4.2 from annotations
// in workout_app/test/mock/google_drive_port.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:io' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:workout_app/port/google_drive_port.dart' as _i2;
import 'package:workout_app/port/model/port_file.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [GoogleDrivePort].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleDrivePort extends _i1.Mock implements _i2.GoogleDrivePort {
  MockGoogleDrivePort() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> upload(
    String? folder,
    _i4.File? file,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #upload,
          [
            folder,
            file,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<List<_i5.PortFile>> getFileList(String? folder) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFileList,
          [folder],
        ),
        returnValue: _i3.Future<List<_i5.PortFile>>.value(<_i5.PortFile>[]),
      ) as _i3.Future<List<_i5.PortFile>>);

  @override
  _i3.Future<_i4.File?> download(_i5.PortFile? portFile) => (super.noSuchMethod(
        Invocation.method(
          #download,
          [portFile],
        ),
        returnValue: _i3.Future<_i4.File?>.value(),
      ) as _i3.Future<_i4.File?>);
}
